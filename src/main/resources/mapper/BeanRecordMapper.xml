<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.demo.mapper.BeanRecordMapper">

    <select id="getBeanRecordList" parameterType="com.example.demo.dto.BeanRecordQuery"
            resultType="com.example.demo.entity.BeanRecord">
        select
        re.id,
        re.user_id as userId,
        IFNULL(u.`name` ,'未知用户')as userName,
        re.inviter_id as inviterId,
        re.bean,
        re.price,
        re.finally_price as finallyPrice,
        re.code,
        re.trade_no as tradeNo,
        re.status,
        re.is_benefit as isBenefit,
        re.is_pay_api as isPayApi,
        re.created_at as createdAt,
        re.updated_at as updatedAt
        from bean_records re
        left join users u on u.id =re.user_id
        <where>
            <if test="userId>0">
                and u.id = #{userId}
            </if>
            <if test="userName!=null and userName !=''">
                and u.name = #{userName}
            </if>
            <if test="inviterId>0">
                and re.inviter_id = #{inviterId}
            </if>
            <if test="beginTime!=null and beginTime != ''">
                and date_format(re.created_at,'%Y-%m-%d') >= #{beginTime}
            </if>
            <if test="endTime!=null and beginTime !='' ">
                and date_format(re.created_at,'%Y-%m-%d') <![CDATA[ <=]]> #{endTime}
            </if>
            <if test="status!=null">
                and re.status = #{status}
            </if>
            <if test="code!=null and code !=''">
                and re.code = #{code}
            </if>
        </where>
        order by re.created_at desc
    </select>

    <select id="queryBeanRecords" resultType="java.math.BigDecimal">
          select IFNULL(SUM(bean),0) from bean_records
          where user_id = #{userId}
          and DATE_FORMAT( created_at, '%Y-%m-%d %H:%i:%s' ) >=  DATE_FORMAT( #{payStartTime}, '%Y-%m-%d %H:%i:%s' )
          and status =1
    </select>
    <select id="queryUserBeanRecords" resultType="java.math.BigDecimal">
        select IFNULL(SUM(bean),0) from bean_records
          where user_id = #{userId}
          and status =1
    </select>

    <insert id="insertBeanReacord" parameterType="com.example.demo.entity.BeanRecord">
        insert into bean_records(
            user_id,
            inviter_id,
            bean,
            price,
            finally_price,
            code,
            trade_no,
            status,
            is_benefit,
            is_pay_api,
            created_at
        )values(
            #{userId},
            #{inviterId},
            #{bean},
            #{price},
            #{finallyPrice},
            #{code},
            #{tradeNo},
            #{status},
            #{isBenefit},
            #{isPayApi},
            now()
        )
    </insert>

    <update id="updateBeanRecordsStatus" parameterType="com.example.demo.dto.Callback">
          update bean_records
          set trade_no =  #{order_id},
          status =1 ,
          updated_at = now()
          where code = #{api_order_id}
    </update>
    <select id="queryBeanRecordsByCode" resultType="com.example.demo.entity.BeanRecord">
          select
        re.id,
        re.user_id as userId,
        re.inviter_id as inviterId,
        re.bean,
        re.price,
        re.finally_price as finallyPrice,
        re.code,
        re.trade_no as tradeNo,
        re.status,
        re.is_benefit as isBenefit,
        re.is_pay_api as isPayApi,
        re.created_at as createdAt,
        re.updated_at as updatedAt
        from bean_records re
        where re.code = #{code}
        limit 1
    </select>
    <select id="queryBeanRecordsByTradeNo" resultType="com.example.demo.entity.BeanRecord">
          select
        re.id,
        re.user_id as userId,
        re.inviter_id as inviterId,
        re.bean,
        re.price,
        re.finally_price as finallyPrice,
        re.code,
        re.trade_no as tradeNo,
        re.status,
        re.is_benefit as isBenefit,
        re.is_pay_api as isPayApi,
        re.created_at as createdAt,
        re.updated_at as updatedAt
        from bean_records re
        where re.trade_no = #{cdk}
        limit 1
    </select>
    <update id="updateBeanRecords" parameterType="java.lang.String">
        update bean_records set status = 1 where code =#{orderId}
    </update>
    <select id="queryAllBeanRecords" resultType="java.math.BigDecimal">
         select IFNULL(SUM(bean),0) from bean_records
          where user_id = #{userId}
          and status =1
    </select>

    <insert id="saveRewardLogs" parameterType="com.example.demo.entity.UserRewardLogs">
        insert into user_reward_logs(
        user_id,
        `type`,
        next_user_id,
        bean,
        charge_bean,
        created_at
        )values(
        #{userId},
        #{type},
        #{nextUserId},
        #{bean},
        ifnull(#{chargeBean},0),
        now()
        )
    </insert>
    <update id="updateUserByTradeNo" parameterType="com.example.demo.dto.UserDto">
        update bean_records set user_id =#{user.id},inviter_id = #{user.inviterId},created_at = now()
        where trade_no =#{cdk}
    </update>
</mapper>